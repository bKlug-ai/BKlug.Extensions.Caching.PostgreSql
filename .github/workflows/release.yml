name: Release

on:
  release:
    types: [published]

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: cache_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          8.0.x
          9.0.x
    
    - name: Set VERSION variable from tag
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        echo "Publishing version: ${VERSION}"
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore --configuration Release /p:Version=${VERSION}
    
    - name: Test
      env:
        PGCACHE_TEST_DB: cache_test
        PGCACHE_TEST_USER: postgres
        PGCACHE_TEST_PASS: postgres
        PGCACHE_TEST_HOST: localhost
        PGCACHE_TEST_PORT: 5432
        PGCACHE_TEST_TABLE: cache_items_test
      run: dotnet test --no-build --configuration Release --verbosity normal
    
    - name: Pack
      run: |
        dotnet pack --no-build --configuration Release /p:Version=${VERSION} --output ./artifacts
        echo "Generated packages:"
        ls -la ./artifacts/
    
    - name: Publish to NuGet
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: |
        echo "Publishing packages to NuGet..."
        dotnet nuget push "./artifacts/*.nupkg" --api-key $NUGET_API_KEY --source https://api.nuget.org/v3/index.json --skip-duplicate
        dotnet nuget push "./artifacts/*.snupkg" --api-key $NUGET_API_KEY --source https://api.nuget.org/v3/index.json --skip-duplicate
        echo "Packages published successfully!"

    - name: Create/Update version tag
      run: |
        echo "Updating version tags..."
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -f "v${VERSION}"
        git push origin "v${VERSION}" --force
